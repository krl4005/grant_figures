[[model]]
# This model was taken from Alexs github repo ap-vc-correlations and the following changes were made by Kristin:
### Protocol, Multiplier, parameters, and Ibias sections were added
### IK1 Dynamic clamp was added
### Multipliers were added to each conductance in their respective section 
### ### Changed the stimulus amplitude from -550 pA to 1 A/F for the rrc calculation 

# Initial values
membrane.V   = -7.43340057623840950e+1
ina.m        =  1.02953468725003994e-1
ina.h        =  7.86926637881461000e-1
ina.j        =  2.53943221774722006e-1
ical.d       =  8.96088425225181960e-5
ical.f1      =  9.70411811263976021e-1
ical.f2      =  9.99965815466749008e-1
ical.fCa     =  9.98925296531803952e-1
ikr.xr1      =  7.78547011240132009e-3
ikr.xr2      =  4.32162576531616993e-1
iks.xs       =  3.22944866983665979e-2
if.xf        =  1.00615100568753002e-1
ito.q        =  8.39295925773218987e-1
ito.r        =  5.73289893326379019e-3
irel.g       =  9.99999981028516949e-1
sodium.Nai   =  1.09248496211573993e1
calcium.Cai  =  1.80773974140477016e-5
calcium.CaSR =  2.73423475193100007e-1
ik1_ishi.y1     = 0.00000000000000
INaL.mL         = 0.0001629 #added from TORORD
INaL.hL         = 0.5255 #added from TORORD
INaL.hLp        = 0.2872 #added from TORORD
CaMK.CaMKt      = 0.0111 #added from TORORD



#### KRISTIN ADDED IN MULIPLIERS, DYNAMIC CLAMP, & IBIAS ####
[multipliers]
i_cal_pca_multiplier = 1
i_kr_multiplier = 1
i_ks_multiplier = 1
i_na_multiplier = 1
i_to_multiplier = 1
i_k1_multiplier = 1
i_f_multiplier = 1
i_b_Ca = 1
i_b_Na = 1
Ibias_multiplier = 0
i_nal_multiplier = 0

[parameters]
ik1_ishi_dc_scale = 0.0

[Ibias]
Ibias= 1* membrane.V/membrane.V * multipliers.Ibias_multiplier

#########

[engine]
time = 0 [ms]
    in [ms]
    bind time
pace = 0
    bind pace

#
# Stimulus current
#
[stimulus]
i_stim = engine.pace * amplitude #/ cell.Cm
    in [A/F]
amplitude = -1  
    in [pA/pF]
i_dc = (ik1_ishi.IK1_ishi*parameters.ik1_ishi_dc_scale)

#
# Membrane potential - KRISTIN ADDED IN DYNAMIC CLAMP 
#
[membrane]
use voltageclamp.ILeak
dot(V) = -(i_ion + stimulus.i_stim + stimulus.i_dc)
    in [mV]
    label membrane_potential
i_ion = (+ ik1.IK1 + ikr.IKr + iks.IKs + ito.Ito + if.If
         + ina.INa + ibna.IbNa + INaL.INaL
         + ical.ICaL + ipca.IpCa + ibca.IbCa
         + inak.INaK
         + inaca.INaCa
         + Ibias.Ibias
        ) + ILeak
    in [A/F]
    label cellular_current

[voltageclamp]
use membrane.V
gLeak = 1 [pA/mV]
ELeak = 0 [mV]
ILeak = gLeak * (V - ELeak) / cell.Cm in [pA]

#
# ADDED IN FROM TORORD SO THAT INAL CAN BE INCLUDED
#
[CaMK]
CaMKa = CaMKb + CaMKt
    in [mM]
CaMKb = CaMKo * (1 [mM] - CaMKt) / (1 + KmCaM / calcium.Cai)
    in [mM]
CaMKo = 0.05
    in [1]
dot(CaMKt) = aCaMK * CaMKb * (CaMKb + CaMKt) - bCaMK * CaMKt
    in [mM]
KmCaM = 0.0015 [mM]
    in [mM]
KmCaMK = 0.15 [mM]
    in [mM]
aCaMK = 0.05 [1/mM/ms]
    in [1/mM/ms]
bCaMK = 0.00068 [mS/uF]
    in [mS/uF]

[INaL]
# ADDED FROM TORORD
GNaL = GNaL_b
    in [mS/uF]
GNaL_b = 0.0279 * multipliers.i_nal_multiplier * 107/293 #107 is peak Paci sodium (with IK1 dynamic clamp, cap = 50, and gleak = 0.5) and 293 is peak Tor-ORd
    in [mS/uF]
    oxmeta: membrane_persistent_sodium_current_conductance
INaL = GNaL * (membrane.V - rev.ENa) * mL * ((1 - fINaLp) * hL + fINaLp * hLp)
    in [A/F]
    oxmeta: membrane_persistent_sodium_current
fINaLp = 1 / (1 + CaMK.KmCaMK / CaMK.CaMKa)
    in [1]
dot(hL) = (hLss - hL) / thL
    in [1]
dot(hLp) = (hLssp - hLp) / thLp
    in [1]
hLss = 1 / (1 + exp((membrane.V + 87.61 [mV]) / 7.488 [mV]))
    in [1]
hLssp = 1 / (1 + exp((membrane.V + 93.81 [mV]) / 7.488 [mV]))
    in [1]
dot(mL) = (mLss - mL) / tmL
    in [1]
mLss = 1 / (1 + exp(-(membrane.V + 42.85 [mV]) / 5.264 [mV]))
    in [1]
thL = 200 [ms]
    in [ms]
thLp = 3 * thL
    in [ms]
tmL = 0.1292 [ms] * exp(-((membrane.V + 45.79 [mV]) / 15.54 [mV])^2) + 0.06487 [ms] * exp(-((membrane.V - 4.823 [mV]) / 51.12 [mV])^2)
    in [ms]



#
# Ishihara inward recifier used only for dynamic clamp 
#
[ik1_ishi]
use membrane.V
use extra.Ko
use rev.EK
mg_in=1
spm_in=0.005
phi=.9

alpha= (0.17*exp(-0.07*((V-EK) + 8*mg_in)))/(1+0.01*exp(0.12*(V-EK)+8*mg_in))
beta = (spm_in*280*exp(0.15*(V-EK)+8*mg_in))/(1+0.01*exp(0.13*(V-EK)+8*mg_in))
kd_spm_l = 0.04*exp(-(V-EK)/9.1)
kd_mg = 0.45*exp(-(V-EK)/20)
fo = 1/(1 + (mg_in/kd_mg))
y2 = 1/(1 + spm_in/kd_spm_l)

dot(y1)=alpha*(1-y1) - beta*fo^3 * y1

g_K1_ishi=2.5*(Ko/5.4)^.4
IK1_ishi = g_K1_ishi*(V-EK)*(phi*fo*y1 + (1-phi)*y2)

#
# Cell size
#
[cell]
Cm = 98.7109 [pF]
    in [pF]
    label membrane_capacitance
V_SR = 0.58373 [pL]
    in [pL]
Vc = 8.8 [pL]
    in [pL]

#
# Physical constants
#
[phys]
R = 8314.472 [mJ/mol/K]
    in [mJ/mol/K]
T = 310 [K]
    in [K]
F = 96485.3415 [C/mol]
    in [C/mol]
RTF = R * T / F
    in [mV]
FRT = F / R / T
    in [1/mV]

#
# Reversal potentials
#
[rev]
use phys.RTF
ECa = 0.5 * RTF * log(extra.Cao / calcium.Cai)
    in [mV]
EK = RTF * log(extra.Ko / potassium.Ki)
    in [mV]
EKs = RTF * log((extra.Ko + PkNa * extra.Nao) / (potassium.Ki + PkNa * sodium.Nai))
    in [mV]
ENa = RTF * log(extra.Nao / sodium.Nai)
    in [mV]
PkNa = 0.03

#
# L-type calcium current
#
[ical]
use membrane.V
use phys.F, phys.FRT
use calcium.Cai, extra.Cao
dot(d) = (inf - d) / tau
    inf = 1 / (1 + exp(-(V + 9.1 [mV]) / 7 [mV]))
    a = 0.25 + 1.4 / (1 + exp((-V - 35 [mV]) / 13 [mV]))
    b = 1.4 [ms] / (1 + exp((V + 5 [mV]) / 5 [mV]))
        in [ms]
    c = 1 [ms] / (1 + exp((-V + 50 [mV]) / 20 [mV]))
        in [ms]
    tau = a * b + c
        in [ms]
dot(f1) = (inf - f1) / tau
    inf = 1 / (1 + exp((V + 26 [mV]) / 3 [mV]))
    tau = (20 [ms]
           + 1102.5 [ms] * exp(-((V + 27 [mV])^2 / 15 [mV^2])^2)
           + 200 [ms] / (1 + exp((13 [mV] - V) / 10 [mV]))
           + 180 [ms] / (1 + exp((30 [mV] + V) / 10 [mV]))
          ) * c
        in [ms]
    c = if(f1 < inf, 1 + 1433 [1/mM] * (Cai - 50e-6 [mM]), 1)
dot(f2) = (inf - f2) / tau
    inf = 0.33 + 0.67 / (1 + exp((V + 35 [mV]) / 4 [mV]))
    tau = (600 [ms] * exp(-(V + 25 [mV])^2 / 170 [mV^2])
           + 31 [ms] / (1 + exp((25 [mV] - V) / 10 [mV]))
           + 16 [ms] / (1 + exp((30 [mV] + V) / 10 [mV]))
          )
        in [ms]
dot(fCa) = e * (inf - fCa) / tau
    inf = (a + b + c) / 1.3156
    a = 1 / (1 + (Cai / 0.0006 [mM])^8)
    b = 0.1 / (1 + exp((Cai - 0.0009 [mM]) / 0.0001 [mM]))
    c = 0.3 / (1 + exp((Cai - 0.00075 [mM]) / 0.0008 [mM]))
    tau = 2 [ms]
        in [ms]
    e = if(V > -60 [mV] and inf > fCa, 0, 1)
P_CaL = 8.635702e-5 [L/F/ms] * multipliers.i_cal_pca_multiplier
    in [L/F/ms]
    label P_CaL
ICaL = P_CaL * d * f1 * f2 * fCa * if(V != 0 [mV], b, c)
    in [A/F]
    label I_CaL
    b = 4 * V * F * FRT * (Cai * exp(2 * V * FRT) - 0.341 * Cao) / (exp(2 * V * FRT) - 1)
        in [mM*C/mol]
    c = 2 * F * (Cai - 0.341 * Cao)
        in [mM*C/mol]

#
# IK1
#
[ik1]
use membrane.V
use rev.EK, extra.Ko
inf = alpha / (alpha + beta)
    alpha = 3.91 / (1 + exp(0.5942 [1/mV] * (V - EK - 200 [mV])))
    beta = (-1.509 * exp(0.0002 [1/mV] * (V - EK + 100 [mV])) + exp(0.5886 [1/mV] * (V - EK - 10 [mV]))) / (1 + exp(0.4547 [1/mV] * (V - EK)))
g = 0.0281492 [mS/uF] * multipliers.i_k1_multiplier
    in [mS/uF]
    label g_K1
IK1 = g * inf * sqrt(Ko / 5.4 [mM]) * (V - EK)
    in [A/F]
    label I_K1

#
# IKr
#
[ikr]
use extra.Cao, extra.Ko
use membrane.V
dot(xr1) = (inf - xr1) / tau
    L0 = 0.025
    Q = 2.3
    V_half = -phys.RTF / Q * log((1 + Cao / 2.6 [mM])^4 / (L0 * (1 + Cao / 0.58 [mM])^4)) - 19 [mV]
        in [mV]
    inf = 1 / (1 + exp((V_half - V) / 4.9 [mV]))
    alpha = 450 [ms] / (1 + exp((-45 [mV] - V) / 10 [mV]))
        in [ms]
    beta = 6 / (1 + exp((30 [mV] + V) / 11.5 [mV]))
    tau = alpha * beta
        in [ms]
dot(xr2) = (inf - xr2) / tau
    inf = 1 / (1 + exp((V + 88 [mV]) / 50 [mV]))
    alpha = 3 [ms] / (1 + exp((-60 [mV] - V) / 20 [mV]))
        in [ms]
    beta = 1.12 / (1 + exp((-60 [mV] + V) / 20 [mV]))
    tau = alpha * beta
        in [ms]
g = 0.0298667 [mS/uF] * multipliers.i_kr_multiplier
    in [mS/uF]
    label g_Kr
IKr = g * sqrt(Ko / 5.4 [mM]) * xr1 * xr2 * (V - rev.EK)
    in [A/F]
    label I_Kr

#
# IKs
#
[iks]
use membrane.V
dot(xs) = (inf - xs) / tau
    inf = 1 / (1 + exp((-V - 20 [mV]) / 16 [mV]))
    alpha = 1100 [ms] / sqrt(1 + exp((-10 [mV] - V) / 6 [mV]))
        in [ms]
    beta = 1 / (1 + exp((-60 [mV] + V) / 20 [mV]))
    tau = alpha * beta
        in [ms]
g = 0.002041 [mS/uF] * multipliers.i_ks_multiplier 
    in [mS/uF]
    label g_Ks
k = 1 + 0.6 / (1 + (3.8e-5 [mM] / calcium.Cai)^1.4)
IKs = g * xs^2 * k * (V - rev.EKs)
    in [A/F]
    label I_Ks

#
# Funny current, haha!
#
[if]
use membrane.V
dot(xf) = (inf - xf) / tau
    inf = 1 / (1 + exp((V + 77.85 [mV]) / 5 [mV]))
    tau = 1900 [ms] / (1 + exp((V + 15 [mV]) / 10 [mV]))
        in [ms]
E = -17 [mV]
    in [mV]
g = 0.03010312 [mS/uF] * multipliers.i_f_multiplier
    in [mS/uF]
    label g_f
If = g * xf * (V - E)
    in [A/F]
    label I_f

#
# Ito
#
[ito]
use membrane.V
dot(q) = (inf - q) / tau
    inf = 1 / (1 + exp((V + 53 [mV]) / 13 [mV]))
    tau = 6.06 [ms] + 39.102 [ms] / (
            0.57 * exp(-0.08 [1/mV] * (V + 44 [mV]))
            + 0.065 * exp(0.1 [1/mV] * (V + 45.93 [mV]))
          )
        in [ms]
dot(r) = (inf - r) / tau
    inf = 1 / (1 + exp(-(V - 22.3 [mV]) / 18.75 [mV]))
    tau = 2.75352 [ms] + 14.40516 [ms] / (1.037 * exp(0.09 [1/mV] * (V + 30.61 [mV])) + 0.369 * exp(-0.12 [1/mV] * (V + 23.84 [mV])))
        in [ms]
g = 0.0299038 [mS/uF] * multipliers.i_to_multiplier
    in [mS/uF]
    label g_to
Ito = g * q * r * (V - rev.EK)
    in [A/F]
    label I_to

#
# INa
#
[ina]
use membrane.V
dot(m) = (inf - m) / tau
    inf = 1 / (1 + exp((-V - 34.1 [mV]) / 5.9 [mV]))^(1 / 3)
    alpha = 1 [ms] / (1 + exp((-V - 60 [mV]) / 5 [mV]))
        in [ms]
    beta = 0.1 / (1 + exp((V + 35 [mV]) / 5 [mV])) + 0.1 / (1 + exp((V - 50 [mV]) / 200 [mV]))
    tau = alpha * beta
        in [ms]
dot(h) = (inf - h) / tau
    inf = 1 / sqrt(1 + exp((V + 72.1 [mV]) / 5.7 [mV]))
    alpha = if(V < -40 [mV],
               0.057 [1/ms] * exp(-(V + 80 [mV]) / 6.8 [mV]),
               0 [1/ms]
              )
        in [1/ms]
    beta = if(V < -40 [mV],
              2.7 [1/ms] * exp(0.079 [1/mV] * V) + 3.1 [1/ms] * 1e5 * exp(0.3485 [1/mV] * V),
              0.77 [1/ms] / (0.13 * (1 + exp((V + 10.66 [mV]) / -11.1 [mV])))
             )
        in [1/ms]
    tau = if(V < -40 [mV], 1 / (alpha + beta), 1.6947 [ms]) * 1.5
        in [ms]
dot(j) = (inf - j) / tau
    inf = 1 / sqrt(1 + exp((V + 72.1 [mV]) / 5.7 [mV]))
    alpha = if(V < -40 [mV],
               (-25428 [1/ms/mV] * exp(0.2444 [1/mV] * V)
                -6.948 [1/ms/mV] * 1e-6 * exp(-0.04391 [1/mV] * V)
               ) * (V + 37.78 [mV]) / (1 + exp(0.311 [1/mV] * (V + 79.23 [mV]))),
               0 [1/ms])
        in [1/ms]
    beta = if(V < -40 [mV],
              0.02424 [1/ms] * exp(-0.01052 [1/mV] * V) / (1 + exp(-0.1378 [1/mV] * (V + 40.14 [mV]))),
              0.6 [1/ms] * exp(0.057 [1/mV] * V) / (1 + exp(-0.1 [1/mV] * (V + 32 [mV])))
             )
        in [1/ms]
    tau = 7 / (alpha + beta)
        in [ms]
g = 3.6712302 [mS/uF] * multipliers.i_na_multiplier 
    in [mS/uF]
    label g_Na
INa = g * m^3 * h * j * (V - rev.ENa)
    in [A/F]
    label I_Na

#
# INaCa
#
[inaca]
use membrane.V
use phys.FRT
use sodium.Nai, extra.Nao
use calcium.Cai, extra.Cao
KmCa = 1.38 [mM]
    in [mM]
KmNai = 87.5 [mM]
    in [mM]
Ksat = 0.1
alpha = 2.8571432
gamma = 0.35
kNaCa = 4900 [A/F]
    in [A/F]
    label g_NaCa    # Not sure this is semantically correct
INaCa = kNaCa * numer / denom
    in [A/F]
    label I_NaCa
    numer = exp(gamma * V * FRT) * Nai^3 * Cao - exp((gamma - 1) * V * FRT) * Nao^3 * Cai * alpha
        in [mM^4]
    denom = (KmNai^3 + Nao^3) * (KmCa + Cao) * (1 + Ksat * exp((gamma - 1) * V * FRT))
        in [mM^4]

#
# INaK
#
[inak]
use membrane.V
use extra.Ko, sodium.Nai
use phys.FRT
Km_K = 1 [mM]
    in [mM]
Km_Na = 40 [mM]
    in [mM]
PNaK = 1.841424 [A/F]
    in [A/F]
    label P_NaK
INaK = PNaK * Ko / (Ko + Km_K) * Nai / (Nai + Km_Na) / (1 + 0.1245 * exp(-0.1 * V * FRT) + 0.0353 * exp(-V * FRT))
    in [A/F]
    label I_NaK

#
# IpCa
#
[ipca]
KpCa = 0.0005 [mM]
    in [mM]
g = 0.4125 [A/F]
    in [A/F]
    label g_CaP
IpCa = g * calcium.Cai / (calcium.Cai + KpCa)
    in [A/F]
    label I_CaP

#
# Background calcium current
#
[ibca]
g = 6.9264e-4 [mS/uF] * multipliers.i_b_Ca
    in [mS/uF]
    label g_CaB
IbCa = g * (membrane.V - rev.ECa)
    in [A/F]
    label I_CaB

#
# Background sodium current
#
[ibna]
g = 9e-4 [mS/uF] * multipliers.i_b_Na
    in [mS/uF]
    label g_NaB
IbNa = g * (membrane.V - rev.ENa)
    in [A/F]
    label I_NaB

#
# Internal potassium concentration
#
[potassium]
Ki = 150 [mM]
    in [mM]
    label K_i

#
# Internal sodium concentration
#
[sodium]
use cell.Cm, cell.Vc, phys.F
dot(Nai) = 0 
    in [mM]
    label Na_i

#
# Ryanodine release receptors
#
[irel]
use calcium.Cai, calcium.CaSR
dot(g) = (inf - g) / tau
    inf = if(Cai <= 0.00035 [mM], 1 / (1 + (Cai / 0.00035 [mM])^6), 1 / (1 + (Cai / 0.00035 [mM])^16))
    tau = 2 [ms] / c
        in [ms]
    c = if(inf > g and membrane.V > -60 [mV], 0, 1)
a_rel = 0.016464 [mM/ms]
    in [mM/ms]
b_rel = 0.25 [mM]
    in [mM]
c_rel = 8.232e-3 [mM/ms]
    in [mM/ms]
i_rel = (c_rel + a_rel * CaSR^2 / (b_rel^2 + CaSR^2)) * ical.d * g * 0.0411
    in [mM/ms]

#
# Ca uptake into SR
#
[iup]
use calcium.Cai
Kup = 0.00025 [mM]
    in [mM]
VmaxUp = 5.6064e-4 [mM/ms]
    in [mM/ms]
i_up = VmaxUp / (1 + Kup^2 / Cai^2)
    in [mM/ms]

#
# Ca leak from SR
#
[ileak]
use calcium.Cai, calcium.CaSR
V_leak = 4.4444e-7 [1/ms]
    in [1/ms]
i_leak = (CaSR - Cai) * V_leak
    in [mM/ms]

#
# Internal calcium concentrations
#
[calcium]
use membrane.V
use cell.Vc, cell.V_SR
use iup.i_up, irel.i_rel, ileak.i_leak
Buf_C = 0.25 [mM]
    in [mM]
Buf_SR = 10 [mM]
    in [mM]
Kbuf_C = 0.001 [mM]
    in [mM]
Kbuf_SR = 0.3 [mM]
    in [mM]
CaSR_bufSR = 1 / (1 + Buf_SR * Kbuf_SR / (CaSR + Kbuf_SR)^2)
Cai_bufc = 1 / (1 + Buf_C * Kbuf_C / (Cai + Kbuf_C)^2)
dot(CaSR) = CaSR_bufSR * (Vc / V_SR) * (i_up - i_rel - i_leak)
    in [mM]
dot(Cai) = Cai_bufc * (i_leak - i_up + i_rel - (ical.ICaL + ibca.IbCa + ipca.IpCa - 2 * inaca.INaCa) * cell.Cm / (2 * Vc * phys.F))
    in [mM]
    label Ca_i

#
# Extracellular concentrations
#
[extra]
Cao = 1.8 [mM]
    in [mM]
    label Ca_o
Nao = 151 [mM]
    in [mM]
    label Na_o
Ko = 5.4 [mM]
    in [mM]
    label K_o

[[protocol]]
# Level  Start    Length   Period   Multiplier
#1.0      10       .0001        800      0

[[script]]
import matplotlib.pyplot as plt
import myokit

# Get model, create simulation
m = get_model()
s = myokit.Simulation(m)

# Run simulation
d = s.run(3000)

# Display the results
plt.figure()
plt.xlabel('Time (ms)')
plt.ylabel('Membrane potential (mV)')
plt.plot(d.time(), d['membrane.V'])
plt.show()

